// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id	        Int            @id @default(autoincrement())
  email         String         @unique
  username      String         @unique
  password      String
  avatarUrl     String
  createdAt     DateTime       @default(now())
  artworks      Artwork[]
  followers     Follow[]       @relation("Follower")
  following     Follow[]       @relation("Following")
  followedTags  Tag[]
  notifications Notification[] @relation("Notified")
  notified      Notification[] @relation("Notifier")
  comments      Comment[]
  likes         Like[]
}

model Tag {
  id   	   Int       @id @default(autoincrement())
  tagname  String    @unique
  artworks Artwork[]
  follower User[] 
}

model Artwork {
  id  Int      	 	   @id @default(autoincrement())
  uploaderID  Int
  uploader    User     @relation(fields: [uploaderID], references: [id], onDelete: Cascade)
  imageUrls   String[]
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likesCount  Int

  comments      Comment[]
  likes         Like[]
  tags          Tag[]
  notifications Notification[]
}

model Comment {
  id        		Int            @id @default(autoincrement())
  comment           String
  commenterId       Int
  commenter         User           @relation(fields: [commenterId], references: [id], onDelete: Cascade) // Many-to-One (Many Comments One User)
  artworkId         Int
  artwork           Artwork        @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  parentCommentId   Int?
  parentComment     Comment?       @relation("Parent", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies           Comment[]      @relation("Parent")
  likesCount        Int            @default(0)
  likes             Like[]
  notifications     Notification[]
}

enum LikeableType {
  ARTWORK
  COMMENT
}

model Like {
  id       		Int          @id @default(autoincrement())
  userId        Int //# Person who liked the artwork or comment
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  likeableType  LikeableType
  artworkId     Int?
  artwork       Artwork?      @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  commentId     Int?
  comment       Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Follow {
  followerId   Int
  followingId  Int
  createdAt    DateTime @default(now())
  follower     User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following    User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Notification {
  id   				Int              @id @default(autoincrement())
  userId            Int
  notifierId        Int
  notificationType  NotificationType
  artworkId         Int?
  artwork           Artwork?         @relation(fields: [artworkId], references: [id])
  commentId         Int?
  comment           Comment?         @relation(fields: [commentId], references: [id])
  createdAt         DateTime          @default(now())
  isRead            Boolean           @default(false)
  user              User             @relation("Notified", fields: [userId], references: [id], onDelete: Cascade)
  notifier          User             @relation("Notifier", fields: [notifierId], references: [id])
}

enum NotificationType {
  UPLOADED
  FOLLOWED
  LIKED
  COMMENTED
  REPLIED
  TAGGED
}
